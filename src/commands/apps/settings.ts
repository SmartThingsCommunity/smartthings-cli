import { type ArgumentsCamelCase, type Argv, type CommandModule } from 'yargs'

import { apiCommand, apiCommandBuilder, type APICommandFlags, apiDocsURL } from '../../lib/command/api-command.js'
import { outputItem, outputItemBuilder, OutputItemFlags } from '../../lib/command/output-item.js'
import { buildTableOutput, chooseApp } from '../../lib/command/util/apps-util.js'


export type CommandArgs =
	& APICommandFlags
	& OutputItemFlags
	& {
		idOrIndex?: string
	}

const command = 'apps:settings [id-or-index]'

const describe = 'get the settings of an app'

const builder = (yargs: Argv): Argv<CommandArgs> =>
	outputItemBuilder(apiCommandBuilder(yargs))
		.positional('id-or-index', { describe: 'the app id or number from list', type: 'string' })
		.example([
			['$0 apps:settings', 'prompt for an app and get settings for it'],
			[
				'$0 apps:settings 3',
				'get settings for the third app in the list generated by "smartthings apps"',
			],
			[
				'$0 apps:settings 392bcb11-e251-44f3-b58b-17f93015f3aa',
				'get the settings of the app with the given id',
			],
		])
		.epilog(apiDocsURL('getAppSettings'))

const handler = async (argv: ArgumentsCamelCase<CommandArgs>): Promise<void> => {
	const command = await apiCommand(argv)

	const id = await chooseApp(command, argv.idOrIndex, { allowIndex: true })

	await outputItem(
		command,
		{ buildTableOutput: appSettings => buildTableOutput(command.tableGenerator, appSettings) },
		() => command.client.apps.getSettings(id),
	)
}

const cmd: CommandModule<object, CommandArgs> = { command, describe, builder, handler }
export default cmd
